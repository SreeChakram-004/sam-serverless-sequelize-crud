service: sam-sequelize-crud-serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region,'us-west-2'}
  memorySize: 128
  logRetentionInDays: 30 #logs will be cleared after 30 days
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - cognito-idp:*
  #     Resource: "*"
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - cognito-idp:AdminInitiateAuth
  #       - cognito-idp:AdminCreateUser
  #       - cognito-idp:AdminSetUserPassword
  #     Resource: "*"
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - ec2:CreateNetworkInterface
  #       - ec2:DescribeNetworkInterfaces
  #       - ec2:DeleteNetworkInterface
  #     Resource:
  #       - "*"

functions:
  app:
    handler: handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    authorizer:
      type: COGNITO_USER_POOLS
    authorizerId:
      Ref: us-west-2_ehdLPU7XQ


resources:
  Resources:
    # ApiGatewayAuthorizer:
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     Properties:
    #       Fn::ImportValue: ${self:custom.project}-${self:custom.stage}-ApiGatewayId
    #       Name: SamServerlessCrudApiGatewayAuthorizer
    #       Type: COGNITO_USER_POOLS
    #       ProviderARNs:
    #         - arn:aws:cognito-idp:us-west-2:805045445875:userpool/us-west-2_ehdLPU7XQ
    MyAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        RestApiId: 38hes35l77
        Name: MyAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        AuthorizerResultTtlInSeconds: 30
        ProviderARNs:
          - arn:aws:cognito-idp:us-west-2:805045445875:userpool/us-west-2_ehdLPU7XQ
        AuthType: "cognito_user_pools"

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: SamSequelizeCrudUserPool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationSubject: Verify your email for My App
        EmailVerificationMessage: Please click the link below to verify your email address {####}
        SmsVerificationMessage: Your verification code is {####}.
        MfaConfiguration: OFF

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: us-west-2_ehdLPU7XQ
        ClientName: SamSequelizeCrudUserPoolClient
        GenerateSecret: false
      # Configure other properties as needed

    # MyAuthorizer:
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     RestApiId: 4o7fxj85wc
    #     Name: MyAuthorizer
    #     Type: COGNITO_USER_POOLS
    #     ProviderARNs:
    #       - arn:aws:cognito-idp:us-west-2:805045445875:userpool/us-west-2_ehdLPU7XQ

    


# functions:
#   app:
#     handler: handler.handler
#     events:
#       - http: ANY /
#       - http: 'ANY {proxy+}'
#     authorizer:
#       type: COGNITO_USER_POOLS
#     authorizerId:
#       Ref: us-west-2_xy2i1fQzv

# resources:
#   Resources:
#     ApiGatewayAuthorizer:
#       Type: AWS::ApiGateway::Authorizer
#       Properties:
#         Name: my-authorizer
#         Type: COGNITO_USER_POOLS
#         IdentitySource: method.request.header.Authorization
#         RestApiId:
#           Ref: ApiGatewayRestApi
#         ProviderARNs:
#           - arn:aws:cognito-idp:us-west-2:805045445875:userpool/us-west-2_xy2i1fQzv
#     ApiGatewayRestApi:
#       Type: AWS::ApiGateway::RestApi
#       Properties:
#         Name: my-api



      # VerificationMessageTemplate:
      #   DefaultEmailOption: CONFIRM_WITH_CODE
      #   EmailMessage: Your verification code is {####}
      #   EmailSubject: Verify your email for our service

          # DB_HOST: my-rds-hostname
          # DB_PORT: 5432
          # DB_NAME: my-database-name
          # DB_USERNAME: my-database-username
          # DB_PASSWORD: my-database-password

    






     



# Resources:
#   CognitoUserPool:
#     Type: AWS::Cognito::UserPool
#     Properties: 
#       UserPoolName: SamSequelizeCrudUserPool-${self:provider.stage}
#       UserNameAttributes: 
#         - email
  
#   CognitoUserPoolClient:
#     Type: AWS::Cognito::UserPoolClient
#     Properties:
#       UserPoolId: !Ref CognitoUserPool
#       ClientName: SamSequelizeCrudUserPoolClient-${self:provider.stage}
#       AllowedOAuthFlowsUserPoolClient: True
#       AllowedOAuthScopes:
#         - email 
#         - profile
#         - openid
#       SupportedIdentityProviders:
#         - COGNITO
#       AllowedOAuthFlows:
#         - implicit
#       CallbackURLS:
#         - https://jjlqnydai6.execute-api.us-west-2.amazonaws.com/dev
#       DefaultRedirectURI: https://jjlqnydai6.execute-api.us-west-2.amazonaws.com/dev

#   CognitoUserPoolDomain:
#       Type: AWS::Cognito::UserPoolDomain
#       Properties:
#         Domain: SamSequelizeCrudUserPoolDomain-${self:provider.stage}
#         UserPoolId: !Ref CognitoUserPool

#   plugins: 
#     - serverless-iam-roles-per-function
# # custom:
# #   COGNITO_USER_POOL_ID: !Ref CognitoUserPool
# #   COGNITO_USER_POOL_CLIENT: !Ref CognitoUserPoolClient

#   MyLambdaFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       CodeUri: .
#       Handler: handler.handler
#       Runtime: nodejs18.x
#       FunctionName: sam-sequelize-crud-serverless
#       MemorySize: 128
#       Timeout: 30

#   MyRestApi:
#     Type: AWS::ApiGateway::RestApi
#     Properties:
#       Name: sam-sequelize-crud-serverless-rest-api
#       Description: My REST API

#   MyResource:
#     Type: AWS::ApiGateway::Resource
#     Properties:
#       ParentId: !GetAtt MyRestApi.RootResourceId
#       PathPart: my-resource

#   MyGetMethod:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       RestApiId: !Ref MyRestApi
#       ResourceId: !Ref MyResource
#       HttpMethod: GET
#       AuthorizationType: NONE
#       Integration:
#         IntegrationHttpMethod: POST
#         Type: AWS_PROXY
#         Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations

#   MyDeployment:
#     Type: AWS::ApiGateway::Deployment
#     DependsOn: [MyGetMethod]
#     Properties:
#       RestApiId: !Ref MyRestApi
#       StageName: dev


      


    

  # CognitoUserPool:
  #   Type: "AWS::Cognito::UserPool"
  #   Properties:
  #     MfaConfiguration: OFF
  #     UserPoolName: aws-cognito-user-pool
  #     UsernameAttributes:
  #       - email
  #     Policies:
  #       PasswordPolicy:
  #       MinimumLength: 8
  #       RequireLowercase: False
  #       RequireNumbers: True
  #       RequireSymbols: False
  #       RequireUppercase: True
  # CognitoUserPoolClient:
  #   Type: "AWS::Cognito::UserPoolClient"
  #   Properties:
  #     ClientName: aws-cognito-user-pool-client
  #     GenerateSecret: False
  #     UserPoolId:
  #       Ref: CognitoUserPool
  # ApiGatewayAuthorizer:
  #   DependsOn:
  #     - ApiGatewayRestApi
  #   Type: AWS::ApiGateway::Authorizer
  #   Properties:
  #     Name: cognito-authorizer
  #     IdentitySource: method.request.header.Authorization
  #     RestApiId:
  #       Ref: ApiGatewayRestApi
  #     Type: COGNITO_USER_POOLS
  #     ProviderARNs:
  #       - Fn::GetAtt: [CognitoUserPool, Arn]
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
